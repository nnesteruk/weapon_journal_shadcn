generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model applicant {
  id          Int           @id @default(autoincrement())
  full_name   String        @db.VarChar(255)
  case_record case_record[]
}

model caliber {
  id                Int               @id @default(autoincrement())
  category_id       Int
  name              String            @db.VarChar(50)
  products_category products_category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([category_id, name], map: "caliber_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model case_record {
  id                    Int        @id @default(autoincrement())
  case_num              Int
  register_date         DateTime   @db.Date
  applicant_id          Int
  ur_or_fiz             Boolean
  contract_num          String     @db.VarChar(50)
  contract_date         DateTime   @db.Date
  contract_sum          Int
  payment_num           String     @db.VarChar(50)
  contract_payment_date DateTime   @db.Date
  products_id           Int
  answer                Int        @default(0)
  identif               Int        @default(0)
  act_identif           Int        @default(0)
  act_selections        Int        @default(0)
  ref_for_test          Int        @default(0)
  decision              Int        @default(0)
  act_complete_work     Int        @default(0)
  program_asp_or_po     Int        @default(0)
  notification          Int        @default(0)
  refusal               Int        @default(0)
  refusal_comment       String?    @db.VarChar(255)
  sertif_num            String?    @db.VarChar(50)
  state_application     String     @db.VarChar(50)
  performer_id          Int?
  payment_deadline      DateTime?  
  applicant             applicant  @relation(fields: [applicant_id], references: [id], onUpdate: NoAction, map: "fk_case_applicant")
  performer             performer? @relation(fields: [performer_id], references: [id], onUpdate: NoAction, map: "fk_case_performer")
  products              products   @relation(fields: [products_id], references: [id], onUpdate: NoAction, map: "fk_case_products")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model manufacturer {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  country  String     @db.VarChar(100)
  model    model[]
  products products[]

  @@unique([name, country], map: "manufacturer_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model model {
  id              Int          @id @default(autoincrement())
  model_name      String       @db.VarChar(255)
  serial_number   String       @db.VarChar(100)
  manufacturer_id Int
  count           Int
  manufacturer    manufacturer @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_model_manufacturer")
  products        products[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model performer {
  id          Int           @id @default(autoincrement())
  full_name   String        @db.VarChar(255)
  case_record case_record[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
  id                  Int               @id @default(autoincrement())
  products_type_id    Int
  product_category_id Int
  model_id            Int
  manufacturer_id     Int
  case_record         case_record[]
  products_category   products_category @relation(fields: [product_category_id], references: [id], onUpdate: NoAction, map: "fk_products_category")
  manufacturer        manufacturer      @relation(fields: [manufacturer_id], references: [id], onUpdate: NoAction, map: "fk_products_manufacturer")
  model               model             @relation(fields: [model_id], references: [id], onUpdate: NoAction, map: "fk_products_model")
  products_type       products_type     @relation(fields: [products_type_id], references: [id], onUpdate: NoAction, map: "fk_products_type")

  @@unique([model_id, manufacturer_id, product_category_id], map: "products_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products_category {
  id               Int           @id @default(autoincrement())
  products_type_id Int
  category_name    String        @db.VarChar(100)
  caliber          caliber[]
  products         products[]
  products_type    products_type @relation(fields: [products_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_category_type")

  @@unique([products_type_id, category_name], map: "category_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products_type {
  id                Int                 @id(map: "weapon_type_pkey")
  products_type     String?
  products          products[]
  products_category products_category[]
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

